!function(t,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e(require("jquery"),require("angular"),require("ng-tags-input"));else if("function"==typeof define&&define.amd)define(["jquery","angular","ng-tags-input"],e);else{var n="object"==typeof exports?e(require("jquery"),require("angular"),require("ng-tags-input")):e(t.jQuery,t.angular,t[!1]);for(var r in n)("object"==typeof exports?exports:t)[r]=n[r]}}(this,function(t,e,n){return function(t){function e(r){if(n[r])return n[r].exports;var u=n[r]={exports:{},id:r,loaded:!1};return t[r].call(u.exports,u,u.exports,e),u.loaded=!0,u.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){(function(t){"use strict";n(6),n(7),n(8),t.module("ngTagsInput.extends",["ngTagsInput.extends.changeTo","ngTagsInput.extends.paste"])}).call(e,n(1))},function(t,e,n){(function(e){"use strict";var r=n(3)["default"],u=n(5),o=r(u);if(!e)throw new Error("Angular.extends requires a AngularJS");t.exports=o["default"]}).call(e,n(2))},function(t,e,n){"use strict";var r=n(3)["default"],u=n(4),o=r(u);if(!o["default"])throw new Error("jQuery.extends requires a jQuery");t.exports=o["default"]},function(t,e){"use strict";e["default"]=function(t){return t&&t.__esModule?t:{"default":t}},e.__esModule=!0},function(e,n){e.exports=t},function(t,n){t.exports=e},function(t,e){t.exports=n},function(t,e,n){(function(t,e){"use strict";t.module("ngTagsInput.extends.changeTo",["ngTagsInput"]).constant("tagsChangeToConfig",{seperator:"|"}).directive("tagsChangeTo",["tagsChangeToConfig","$parse","uniqueFilter",function(t,n,r){return{restrict:"AC",require:"tagsInput",link:function(u,o,i){var a,s,f,l,c;a=n(i.ngModel),l=a.assign,s=n(i.tagsChangeTo),c=s.assign,f=t.seperator,i.$observe("tagsChangeToSeperator",function(e){f=e||t.seperator}),u.$watch(s,function(t){var n;null!=l&&l(u,function(){var u,o,i,a,s;for(a=r("array"===f?e.makeArray(t):(null!=t&&"function"==typeof t.split&&null!=(i=t.split(f))&&"function"==typeof i.filter?i.filter(function(t){return!!t}):void 0)||[]),s=[],u=0,o=a.length;o>u;u++)n=a[u],s.push({text:n});return s}())}),u.$watchCollection(function(){var t,e,n,r,o;for(n=a(u)||[],r=[],t=0,e=n.length;e>t;t++)o=n[t],r.push(o.text);return r},function(t){null!=t&&null!=c&&c(u,"array"===f?t:t.join(f))})}}}])}).call(e,n(1),n(2))},function(t,e,n){(function(t){"use strict";t.module("ngTagsInput.extends.paste",["ngTagsInput"]).constant("tagsPasteConfig",{delimiter:/[|\/\n]/g}).directive("tagsPaste",["tagsPasteConfig","$parse",function(t,e){return{restrict:"AC",require:"tagsInput",link:function(n,r,u){var o,i,a;o=null,u.$observe("tagsPaste",function(e){o=e||t.delimiter,o instanceof RegExp||(o=new RegExp(o.toString(),"g"))}),i=e(u.ngModel),a=i.assign,r.on("paste",function(t){var e,r,u,s,f,l;if(t.preventDefault(),t.stopPropagation(),s=null!=(u=t.originalEvent.clipboardData.getData("text/plain"))&&"function"==typeof u.split?u.split(o).filter(function(t){return!!t}):void 0,s.length>0){for(f=i(n)||[],e=0,r=s.length;r>e;e++)l=s[e],f.some(function(t){return t.text===l})||f.push({text:l});n.$evalAsync(function(){return a(n,f)})}})}}}])}).call(e,n(1))}])});
//# sourceMappingURL=data:application/json;base64,
