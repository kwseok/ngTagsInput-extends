!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t(require("jquery"),require("angular"),require("ng-tags-input"));else if("function"==typeof define&&define.amd)define(["jquery","angular","ng-tags-input"],t);else{var n="object"==typeof exports?t(require("jquery"),require("angular"),require("ng-tags-input")):t(e.jQuery,e.angular,e[!1]);for(var r in n)("object"==typeof exports?exports:e)[r]=n[r]}}(this,function(e,t,n){return function(e){function t(r){if(n[r])return n[r].exports;var u=n[r]={exports:{},id:r,loaded:!1};return e[r].call(u.exports,u,u.exports,t),u.loaded=!0,u.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){(function(e){"use strict";n(6),n(7),e.module("ngTagsInput.extends",["ngTagsInput.extends.changeTo"])}).call(t,n(1))},function(e,t,n){(function(t){"use strict";var r=n(3)["default"],u=n(5),o=r(u);if(!t)throw new Error("Angular.extends requires a AngularJS");e.exports=o["default"]}).call(t,n(2))},function(e,t,n){"use strict";var r=n(3)["default"],u=n(4),o=r(u);if(!o["default"])throw new Error("jQuery.extends requires a jQuery");e.exports=o["default"]},function(e,t){"use strict";t["default"]=function(e){return e&&e.__esModule?e:{"default":e}},t.__esModule=!0},function(t,n){t.exports=e},function(e,n){e.exports=t},function(e,t){e.exports=n},function(e,t,n){(function(e,t){"use strict";e.module("ngTagsInput.extends.changeTo",["ngTagsInput"]).constant("tagsChangeToConfig",{seperator:"|"}).directive("tagsChangeTo",["tagsChangeToConfig","$parse","uniqueFilter",function(e,n,r){return{restrict:"AC",require:"tagsInput",link:function(u,o,i){var a,s,f,l,c;return a=n(i.ngModel),l=a.assign,s=n(i.tagsChangeTo),c=s.assign,f=e.seperator,i.$observe("tagsChangeToSeperator",function(t){return f=t||e.seperator}),u.$watch(s,function(e){var n,o,i;return null!=l?(i="array"===f?t.makeArray(e):(null!=e&&"function"==typeof e.split&&null!=(n=e.split(f))&&"function"==typeof n.filter?n.filter(function(e){return!!e}):void 0)||[],l(u,function(){var e,t,n,u;for(n=r(i),u=[],e=0,t=n.length;t>e;e++)o=n[e],u.push({text:o});return u}())):void 0}),void u.$watchCollection(function(){var e,t,n,r,o;for(n=a(u)||[],r=[],e=0,t=n.length;t>e;e++)o=n[e],r.push(o.text);return r},function(e){return null!=e&&null!=c?c(u,"array"===f?e:e.join(f)):void 0})}}}])}).call(t,n(1),n(2))}])});
//# sourceMappingURL=data:application/json;base64,
