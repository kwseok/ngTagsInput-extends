!function(n,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t(require("angular"),require("ng-tags-input"));else if("function"==typeof define&&define.amd)define(["angular","ng-tags-input"],t);else{var e="object"==typeof exports?t(require("angular"),require("ng-tags-input")):t(n.angular,n[!1]);for(var r in e)("object"==typeof exports?exports:n)[r]=e[r]}}(this,function(n,t){return function(n){function t(r){if(e[r])return e[r].exports;var o=e[r]={exports:{},id:r,loaded:!1};return n[r].call(o.exports,o,o.exports,t),o.loaded=!0,o.exports}var e={};return t.m=n,t.c=e,t.p="",t(0)}([function(n,t,e){(function(n){"use strict";e(3),e(4),n.module("ngTagsInput.extends",["ngTagsInput.extends.changeTo"])}).call(t,e(1))},function(n,t,e){"use strict";function r(n){return n&&n.__esModule?n:{"default":n}}var o=e(2),u=r(o);if(!u["default"])throw new Error("ngTagsInput.extends requires a AngularJS");n.exports=u["default"]},function(t,e){t.exports=n},function(n,e){n.exports=t},function(n,t,e){(function(n){"use strict";var t=[].indexOf||function(n){for(var t=0,e=this.length;e>t;t++)if(t in this&&this[t]===n)return t;return-1};n.module("ngTagsInput.extends.changeTo",["ngTagsInput"]).constant("tagsChangeToConfig",{seperator:"|"}).directive("tagsChangeTo",["tagsChangeToConfig","$parse",function(e,r){return{restrict:"AC",require:"tagsInput",link:function(o,u,i){var a,s,f,l,c,g,p,d,h;s=r(i.ngModel),p=s.assign,f=r(i.tagsChangeTo),d=f.assign,g=e.seperator,i.$observe("tagsChangeToSeperator",function(n){return g=n||e.seperator}),l=null,i.$observe("keyProperty",function(n){return l=n}),a="text",i.$observe("displayProperty",function(n){return a=n||"text"}),c=function(n,t){var e;return e={},e[n]=t,e},h=function(n){var e,r,o,u;for(u=[],r=0,o=n.length;o>r;r++)e=n[r],t.call(u,e)<0&&u.push(e);return u},o.$watch(f,function(t){var e;return null!=p?p(o,function(){var r,o,u,i,s;for(i=h("array"===g?null==t?t=[]:n.isArray(t)?void 0:t=[t]:(null!=t&&"function"==typeof t.split&&null!=(u=t.split(g))&&"function"==typeof u.filter?u.filter(function(n){return!!n}):void 0)||[]),s=[],r=0,o=i.length;o>r;r++)e=i[r],s.push(c(l||a,e));return s}()):void 0}),o.$watchCollection(function(){var n,t,e,r,u;for(e=s(o)||[],r=[],n=0,t=e.length;t>n;n++)u=e[n],r.push(u[l||a]);return r},function(n){return null!=n&&null!=d?d(o,"array"===g?n:n.join(g)):void 0})}}}])}).call(t,e(1))}])});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5nLXRhZ3MtaW5wdXQtZXh0ZW5kcy5taW4uanMiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwicmVxdWlyZSIsImRlZmluZSIsImFtZCIsImEiLCJpIiwidGhpcyIsIl9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfMl9fIiwiX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV8zX18iLCJtb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaW5zdGFsbGVkTW9kdWxlcyIsImlkIiwibG9hZGVkIiwiY2FsbCIsIm0iLCJjIiwicCIsImFuZ3VsYXIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0Iiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfYW5ndWxhciIsIl9hbmd1bGFyMiIsIkVycm9yIiwiaW5kZXhPZiIsIml0ZW0iLCJsIiwibGVuZ3RoIiwiY29uc3RhbnQiLCJzZXBlcmF0b3IiLCJkaXJlY3RpdmUiLCJ0YWdzQ2hhbmdlVG9Db25maWciLCIkcGFyc2UiLCJyZXN0cmljdCIsImxpbmsiLCJzY29wZSIsImVsZW1lbnQiLCJhdHRycyIsImRpc3BsYXlQcm9wZXJ0eSIsImdldE1vZGVsIiwiZ2V0VG8iLCJrZXlQcm9wZXJ0eSIsIm1ha2VPYmplY3QiLCJzZXRNb2RlbCIsInNldFRvIiwidW5pcXVlIiwibmdNb2RlbCIsImFzc2lnbiIsInRhZ3NDaGFuZ2VUbyIsIiRvYnNlcnZlIiwidmFsdWUiLCJrIiwidiIsIm8iLCJhcnIiLCJsZW4iLCJyZXN1bHQiLCJwdXNoIiwiJHdhdGNoIiwidGFnIiwicmVmIiwicmVmMSIsInJlc3VsdHMiLCJpc0FycmF5Iiwic3BsaXQiLCJmaWx0ZXIiLCIkd2F0Y2hDb2xsZWN0aW9uIiwidGFncyIsImpvaW4iXSwibWFwcGluZ3MiOiJDQUFBLFNBQTJDQSxFQUFNQyxHQUNoRCxHQUFzQixnQkFBWkMsVUFBMEMsZ0JBQVhDLFFBQ3hDQSxPQUFPRCxRQUFVRCxF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QyxLQUFLdkMsSUFEL0QsZ0JBU21CakIsS0FBS2hCLEVBQVNXLEVBQW9CIiwiZmlsZSI6Im5nLXRhZ3MtaW5wdXQtZXh0ZW5kcy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCJhbmd1bGFyXCIpLCByZXF1aXJlKFwibmctdGFncy1pbnB1dFwiKSk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXCJhbmd1bGFyXCIsIFwibmctdGFncy1pbnB1dFwiXSwgZmFjdG9yeSk7XG5cdGVsc2Uge1xuXHRcdHZhciBhID0gdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnID8gZmFjdG9yeShyZXF1aXJlKFwiYW5ndWxhclwiKSwgcmVxdWlyZShcIm5nLXRhZ3MtaW5wdXRcIikpIDogZmFjdG9yeShyb290W1wiYW5ndWxhclwiXSwgcm9vdFtmYWxzZV0pO1xuXHRcdGZvcih2YXIgaSBpbiBhKSAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnID8gZXhwb3J0cyA6IHJvb3QpW2ldID0gYVtpXTtcblx0fVxufSkodGhpcywgZnVuY3Rpb24oX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV8yX18sIF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfM19fKSB7XG5yZXR1cm4gLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge30sXG4vKioqKioqLyBcdFx0XHRpZDogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oYW5ndWxhcikgeyd1c2Ugc3RyaWN0Jztcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cdFxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXHRcblx0YW5ndWxhci5tb2R1bGUoJ25nVGFnc0lucHV0LmV4dGVuZHMnLCBbJ25nVGFnc0lucHV0LmV4dGVuZHMuY2hhbmdlVG8nXSk7XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSlcblxuLyoqKi8gfSxcbi8qIDEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciBfYW5ndWxhciA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHR2YXIgX2FuZ3VsYXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYW5ndWxhcik7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0aWYgKCFfYW5ndWxhcjIuZGVmYXVsdCkge1xuXHQgICAgdGhyb3cgbmV3IEVycm9yKFwibmdUYWdzSW5wdXQuZXh0ZW5kcyByZXF1aXJlcyBhIEFuZ3VsYXJKU1wiKTtcblx0fVxuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBfYW5ndWxhcjIuZGVmYXVsdDtcblxuLyoqKi8gfSxcbi8qIDIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV8yX187XG5cbi8qKiovIH0sXG4vKiAzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfM19fO1xuXG4vKioqLyB9LFxuLyogNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKGFuZ3VsYXIpIHsndXNlIHN0cmljdCc7XG5cdHZhciBpbmRleE9mID0gW10uaW5kZXhPZiB8fCBmdW5jdGlvbihpdGVtKSB7IGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5sZW5ndGg7IGkgPCBsOyBpKyspIHsgaWYgKGkgaW4gdGhpcyAmJiB0aGlzW2ldID09PSBpdGVtKSByZXR1cm4gaTsgfSByZXR1cm4gLTE7IH07XG5cdFxuXHRhbmd1bGFyLm1vZHVsZSgnbmdUYWdzSW5wdXQuZXh0ZW5kcy5jaGFuZ2VUbycsIFsnbmdUYWdzSW5wdXQnXSkuY29uc3RhbnQoJ3RhZ3NDaGFuZ2VUb0NvbmZpZycsIHtcblx0ICBzZXBlcmF0b3I6ICd8J1xuXHR9KS5kaXJlY3RpdmUoJ3RhZ3NDaGFuZ2VUbycsIFtcblx0ICAndGFnc0NoYW5nZVRvQ29uZmlnJywgJyRwYXJzZScsIGZ1bmN0aW9uKHRhZ3NDaGFuZ2VUb0NvbmZpZywgJHBhcnNlKSB7XG5cdCAgICByZXR1cm4ge1xuXHQgICAgICByZXN0cmljdDogJ0FDJyxcblx0ICAgICAgcmVxdWlyZTogJ3RhZ3NJbnB1dCcsXG5cdCAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuXHQgICAgICAgIHZhciBkaXNwbGF5UHJvcGVydHksIGdldE1vZGVsLCBnZXRUbywga2V5UHJvcGVydHksIG1ha2VPYmplY3QsIHNlcGVyYXRvciwgc2V0TW9kZWwsIHNldFRvLCB1bmlxdWU7XG5cdCAgICAgICAgZ2V0TW9kZWwgPSAkcGFyc2UoYXR0cnMubmdNb2RlbCk7XG5cdCAgICAgICAgc2V0TW9kZWwgPSBnZXRNb2RlbC5hc3NpZ247XG5cdCAgICAgICAgZ2V0VG8gPSAkcGFyc2UoYXR0cnMudGFnc0NoYW5nZVRvKTtcblx0ICAgICAgICBzZXRUbyA9IGdldFRvLmFzc2lnbjtcblx0ICAgICAgICBzZXBlcmF0b3IgPSB0YWdzQ2hhbmdlVG9Db25maWcuc2VwZXJhdG9yO1xuXHQgICAgICAgIGF0dHJzLiRvYnNlcnZlKCd0YWdzQ2hhbmdlVG9TZXBlcmF0b3InLCBmdW5jdGlvbih2YWx1ZSkge1xuXHQgICAgICAgICAgcmV0dXJuIHNlcGVyYXRvciA9IHZhbHVlIHx8IHRhZ3NDaGFuZ2VUb0NvbmZpZy5zZXBlcmF0b3I7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAga2V5UHJvcGVydHkgPSBudWxsO1xuXHQgICAgICAgIGF0dHJzLiRvYnNlcnZlKCdrZXlQcm9wZXJ0eScsIGZ1bmN0aW9uKHZhbHVlKSB7XG5cdCAgICAgICAgICByZXR1cm4ga2V5UHJvcGVydHkgPSB2YWx1ZTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgICBkaXNwbGF5UHJvcGVydHkgPSAndGV4dCc7XG5cdCAgICAgICAgYXR0cnMuJG9ic2VydmUoJ2Rpc3BsYXlQcm9wZXJ0eScsIGZ1bmN0aW9uKHZhbHVlKSB7XG5cdCAgICAgICAgICByZXR1cm4gZGlzcGxheVByb3BlcnR5ID0gdmFsdWUgfHwgJ3RleHQnO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIG1ha2VPYmplY3QgPSBmdW5jdGlvbihrLCB2KSB7XG5cdCAgICAgICAgICB2YXIgbztcblx0ICAgICAgICAgIG8gPSB7fTtcblx0ICAgICAgICAgIG9ba10gPSB2O1xuXHQgICAgICAgICAgcmV0dXJuIG87XG5cdCAgICAgICAgfTtcblx0ICAgICAgICB1bmlxdWUgPSBmdW5jdGlvbihhcnIpIHtcblx0ICAgICAgICAgIHZhciBhLCBpLCBsZW4sIHJlc3VsdDtcblx0ICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXHQgICAgICAgICAgZm9yIChpID0gMCwgbGVuID0gYXJyLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdCAgICAgICAgICAgIGEgPSBhcnJbaV07XG5cdCAgICAgICAgICAgIGlmIChpbmRleE9mLmNhbGwocmVzdWx0LCBhKSA8IDApIHtcblx0ICAgICAgICAgICAgICByZXN1bHQucHVzaChhKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcblx0ICAgICAgICB9O1xuXHQgICAgICAgIHNjb3BlLiR3YXRjaChnZXRUbywgZnVuY3Rpb24odmFsdWUpIHtcblx0ICAgICAgICAgIHZhciB0YWc7XG5cdCAgICAgICAgICBpZiAoc2V0TW9kZWwgIT0gbnVsbCkge1xuXHQgICAgICAgICAgICByZXR1cm4gc2V0TW9kZWwoc2NvcGUsIChmdW5jdGlvbigpIHtcblx0ICAgICAgICAgICAgICB2YXIgaSwgbGVuLCByZWYsIHJlZjEsIHJlc3VsdHM7XG5cdCAgICAgICAgICAgICAgcmVmMSA9IHVuaXF1ZShzZXBlcmF0b3IgPT09ICdhcnJheScgPyB2YWx1ZSA9PSBudWxsID8gdmFsdWUgPSBbXSA6ICFhbmd1bGFyLmlzQXJyYXkodmFsdWUpID8gdmFsdWUgPSBbdmFsdWVdIDogdm9pZCAwIDogKHZhbHVlICE9IG51bGwgPyB0eXBlb2YgdmFsdWUuc3BsaXQgPT09IFwiZnVuY3Rpb25cIiA/IChyZWYgPSB2YWx1ZS5zcGxpdChzZXBlcmF0b3IpKSAhPSBudWxsID8gdHlwZW9mIHJlZi5maWx0ZXIgPT09IFwiZnVuY3Rpb25cIiA/IHJlZi5maWx0ZXIoZnVuY3Rpb24oYSkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuICEhYTtcblx0ICAgICAgICAgICAgICB9KSA6IHZvaWQgMCA6IHZvaWQgMCA6IHZvaWQgMCA6IHZvaWQgMCkgfHwgW10pO1xuXHQgICAgICAgICAgICAgIHJlc3VsdHMgPSBbXTtcblx0ICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYxLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB0YWcgPSByZWYxW2ldO1xuXHQgICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKG1ha2VPYmplY3Qoa2V5UHJvcGVydHkgfHwgZGlzcGxheVByb3BlcnR5LCB0YWcpKTtcblx0ICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG5cdCAgICAgICAgICAgIH0pKCkpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIHNjb3BlLiR3YXRjaENvbGxlY3Rpb24oZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgICB2YXIgaSwgbGVuLCByZWYsIHJlc3VsdHMsIHRhZztcblx0ICAgICAgICAgIHJlZiA9IGdldE1vZGVsKHNjb3BlKSB8fCBbXTtcblx0ICAgICAgICAgIHJlc3VsdHMgPSBbXTtcblx0ICAgICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuXHQgICAgICAgICAgICB0YWcgPSByZWZbaV07XG5cdCAgICAgICAgICAgIHJlc3VsdHMucHVzaCh0YWdba2V5UHJvcGVydHkgfHwgZGlzcGxheVByb3BlcnR5XSk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICByZXR1cm4gcmVzdWx0cztcblx0ICAgICAgICB9LCBmdW5jdGlvbih0YWdzKSB7XG5cdCAgICAgICAgICBpZiAoKHRhZ3MgIT0gbnVsbCkgJiYgKHNldFRvICE9IG51bGwpKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBzZXRUbyhzY29wZSwgc2VwZXJhdG9yID09PSAnYXJyYXknID8gdGFncyA6IHRhZ3Muam9pbihzZXBlcmF0b3IpKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblx0ICAgICAgfVxuXHQgICAgfTtcblx0ICB9XG5cdF0pO1xuXHRcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMSkpKVxuXG4vKioqLyB9XG4vKioqKioqLyBdKVxufSk7XG47Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
