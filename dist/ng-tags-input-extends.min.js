!function(t,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e(require("jquery"),require("angular"),require("ng-tags-input"));else if("function"==typeof define&&define.amd)define(["jquery","angular","ng-tags-input"],e);else{var n="object"==typeof exports?e(require("jquery"),require("angular"),require("ng-tags-input")):e(t.jQuery,t.angular,t[!1]);for(var r in n)("object"==typeof exports?exports:t)[r]=n[r]}}(this,function(t,e,n){return function(t){function e(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return t[r].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){(function(t){"use strict";n(6),n(7),n(8),t.module("ngTagsInput.extends",["ngTagsInput.extends.changeTo","ngTagsInput.extends.paste"])}).call(e,n(1))},function(t,e,n){(function(e){"use strict";var r=n(3)["default"],o=n(5),u=r(o);if(!e)throw new Error("Angular.extends requires a AngularJS");t.exports=u["default"]}).call(e,n(2))},function(t,e,n){"use strict";var r=n(3)["default"],o=n(4),u=r(o);if(!u["default"])throw new Error("jQuery.extends requires a jQuery");t.exports=u["default"]},function(t,e){"use strict";e["default"]=function(t){return t&&t.__esModule?t:{"default":t}},e.__esModule=!0},function(e,n){e.exports=t},function(t,n){t.exports=e},function(t,e){t.exports=n},function(t,e,n){(function(t,e){"use strict";t.module("ngTagsInput.extends.changeTo",["ngTagsInput"]).constant("tagsChangeToConfig",{seperator:"|"}).directive("tagsChangeTo",["tagsChangeToConfig","$parse","uniqueFilter",function(t,n,r){return{restrict:"AC",require:"tagsInput",link:function(o,u,i){var a,s,f,l,c;return a=n(i.ngModel),l=a.assign,s=n(i.tagsChangeTo),c=s.assign,f=t.seperator,i.$observe("tagsChangeToSeperator",function(e){return void(f=e||t.seperator)}),o.$watch(s,function(t){var n,u,i;return null!=l?(i="array"===f?e.makeArray(t):(null!=t&&"function"==typeof t.split&&null!=(n=t.split(f))&&"function"==typeof n.filter?n.filter(function(t){return!!t}):void 0)||[],void l(o,function(){var t,e,n,o;for(n=r(i),o=[],t=0,e=n.length;e>t;t++)u=n[t],o.push({text:u});return o}())):void 0}),void o.$watchCollection(function(){var t,e,n,r,u;for(n=a(o)||[],r=[],t=0,e=n.length;e>t;t++)u=n[t],r.push(u.text);return r},function(t){return null!=t&&null!=c?void c(o,"array"===f?t:t.join(f)):void 0})}}}])}).call(e,n(1),n(2))},function(t,e,n){(function(t){"use strict";t.module("ngTagsInput.extends.paste",["ngTagsInput"]).constant("tagsPasteConfig",{delimiter:/[|\/\n]/g}).directive("tagsPaste",["tagsPasteConfig","$parse",function(t,e){return{restrict:"AC",require:"tagsInput",link:function(n,r,o){var u,i,a;return u=null,o.$observe("tagsPaste",function(e){return u=e||t.delimiter,void(u instanceof RegExp||(u=new RegExp(u.toString(),"g")))}),i=e(o.ngModel),a=i.assign,void r.on("paste",function(t){var e,r,o,s,f,l;if(t.preventDefault(),t.stopPropagation(),s=null!=(o=t.originalEvent.clipboardData.getData("text/plain"))&&"function"==typeof o.split?o.split(u).filter(function(t){return!!t}):void 0,s.length>0){for(f=i(n)||[],e=0,r=s.length;r>e;e++)l=s[e],f.some(function(t){return t.text===l})||f.push({text:l});n.$evalAsync(function(){return a(n,f)})}return void 0})}}}])}).call(e,n(1))}])});
//# sourceMappingURL=data:application/json;base64,
