!function(n,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t(require("angular"),require("ng-tags-input"));else if("function"==typeof define&&define.amd)define(["angular","ng-tags-input"],t);else{var e="object"==typeof exports?t(require("angular"),require("ng-tags-input")):t(n.angular,n[!1]);for(var r in e)("object"==typeof exports?exports:n)[r]=e[r]}}(this,function(n,t){return function(n){function t(r){if(e[r])return e[r].exports;var o=e[r]={exports:{},id:r,loaded:!1};return n[r].call(o.exports,o,o.exports,t),o.loaded=!0,o.exports}var e={};return t.m=n,t.c=e,t.p="",t(0)}([function(n,t,e){(function(n){"use strict";e(3),e(4),n.module("ngTagsInput.extends",["ngTagsInput.extends.changeTo"])}).call(t,e(1))},function(n,t,e){"use strict";function r(n){return n&&n.__esModule?n:{"default":n}}var o=e(2),u=r(o);if(!$)throw new Error("ngTagsInput.extends requires a AngularJS");n.exports=u["default"]},function(t,e){t.exports=n},function(n,e){n.exports=t},function(n,t,e){(function(n){"use strict";n.module("ngTagsInput.extends.changeTo",["ngTagsInput"]).constant("tagsChangeToConfig",{seperator:"|"}).directive("tagsChangeTo",["tagsChangeToConfig","$parse","uniqueFilter",function(t,e,r){return{restrict:"AC",require:"tagsInput",link:function(o,u,i){var a,s,f,l,c,p,g,d;s=e(i.ngModel),g=s.assign,f=e(i.tagsChangeTo),d=f.assign,p=t.seperator,i.$observe("tagsChangeToSeperator",function(n){return p=n||t.seperator}),l=null,i.$observe("keyProperty",function(n){return l=n}),a="text",i.$observe("displayProperty",function(n){return a=n||"text"}),c=function(n,t){var e;return e={},e[n]=t,e},o.$watch(f,function(t){var e;return null!=g?g(o,function(){var o,u,i,s,f;for(s=r("array"===p?null==t?t=[]:n.isArray(t)?void 0:t=[t]:(null!=t&&"function"==typeof t.split&&null!=(i=t.split(p))&&"function"==typeof i.filter?i.filter(function(n){return!!n}):void 0)||[]),f=[],o=0,u=s.length;u>o;o++)e=s[o],f.push(c(l||a,e));return f}()):void 0}),o.$watchCollection(function(){var n,t,e,r,u;for(e=s(o)||[],r=[],n=0,t=e.length;t>n;n++)u=e[n],r.push(u[l||a]);return r},function(n){return null!=n&&null!=d?d(o,"array"===p?n:n.join(p)):void 0})}}}])}).call(t,e(1))}])});
//# sourceMappingURL=data:application/json;base64,
