!function(t,n){if("object"==typeof exports&&"object"==typeof module)module.exports=n(require("jquery"),require("angular"),require("ng-tags-input"));else if("function"==typeof define&&define.amd)define(["jquery","angular","ng-tags-input"],n);else{var e="object"==typeof exports?n(require("jquery"),require("angular"),require("ng-tags-input")):n(t.jQuery,t.angular,t[!1]);for(var r in e)("object"==typeof exports?exports:t)[r]=e[r]}}(this,function(t,n,e){return function(t){function n(r){if(e[r])return e[r].exports;var u=e[r]={exports:{},id:r,loaded:!1};return t[r].call(u.exports,u,u.exports,n),u.loaded=!0,u.exports}var e={};return n.m=t,n.c=e,n.p="",n(0)}([function(t,n,e){(function(t){"use strict";e(6),e(7),e(8),t.module("ngTagsInput.extends",["ngTagsInput.extends.tagsChangeTo","ngTagsInput.extends.tagsChangeToArray"])}).call(n,e(1))},function(t,n,e){(function(n){"use strict";var r=e(3)["default"],u=e(5),o=r(u);if(!n)throw new Error("Angular.extends requires a AngularJS");t.exports=o["default"]}).call(n,e(2))},function(t,n,e){"use strict";var r=e(3)["default"],u=e(4),o=r(u);if(!o["default"])throw new Error("jQuery.extends requires a jQuery");t.exports=o["default"]},function(t,n){"use strict";n["default"]=function(t){return t&&t.__esModule?t:{"default":t}},n.__esModule=!0},function(n,e){n.exports=t},function(t,e){t.exports=n},function(t,n){t.exports=e},function(t,n,e){(function(n){"use strict";t.exports=n.module("ngTagsInput.extends.tagsChangeTo",["ngTagsInput"]).constant("tagsChangeToConfig",{seperator:"|"}).directive("tagsChangeTo",["tagsChangeToConfig","$parse","uniqueFilter",function(t,n,e){return{restrict:"AC",require:"tagsInput",link:function(r,u,o){var a,i,s,f,l;return a=n(o.ngModel),f=a.assign,i=n(o.tagsChangeTo),l=i.assign,s=t.seperator,o.$observe("tagsChangeToSeperator",function(n){return s=n||t.seperator}),r.$watch(i,function(t){var n,u,o;return o=e(null!=t&&"function"==typeof t.split&&null!=(n=t.split(s))&&"function"==typeof n.filter?n.filter(function(t){return!!t}):void 0)||[],f(r,function(){var t,n,e;for(e=[],t=0,n=o.length;n>t;t++)u=o[t],e.push({text:u});return e}())}),void r.$watchCollection(function(){var t,n,e,u,o;for(e=a(r)||[],u=[],t=0,n=e.length;n>t;t++)o=e[t],u.push(o.text);return u},function(t){var n;return null!=t&&null!=l?l(r,function(){var e,r,u,o;for(u=t||[],o=[],e=0,r=u.length;r>e;e++)n=u[e],o.push(n);return o}().join(s)):void 0})}}}])}).call(n,e(1))},function(t,n,e){(function(n,e){"use strict";t.exports=n.module("ngTagsInput.extends.tagsChangeToArray",["ngTagsInput"]).directive("tagsChangeToArray",["$parse","uniqueFilter",function(t,n){return{restrict:"AC",require:"tagsInput",link:function(r,u,o){var a,i,s,f;return a=t(o.ngModel),s=a.assign,i=t(o.tagsChangeToArray),f=i.assign,r.$watch(i,function(t){var u;return s(r,function(){var r,o,a,i;for(a=n(e.makeArray(t)),i=[],r=0,o=a.length;o>r;r++)u=a[r],i.push({text:u});return i}())}),void r.$watchCollection(function(){var t,n,e,u,o;for(e=a(r)||[],u=[],t=0,n=e.length;n>t;t++)o=e[t],u.push(o.text);return u},function(t){var n;return null!=t&&null!=f?f(r,function(){var e,r,u,o;for(u=t||[],o=[],e=0,r=u.length;r>e;e++)n=u[e],o.push(n);return o}()):void 0})}}}])}).call(n,e(1),e(2))}])});
//# sourceMappingURL=data:application/json;base64,
