!function(n,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e(require("angular"),require("ng-tags-input"));else if("function"==typeof define&&define.amd)define(["angular","ng-tags-input"],e);else{var t="object"==typeof exports?e(require("angular"),require("ng-tags-input")):e(n.angular,n[!1]);for(var r in t)("object"==typeof exports?exports:n)[r]=t[r]}}("undefined"!=typeof self?self:this,function(n,e){return function(n){function e(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return n[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}var t={};return e.m=n,e.c=t,e.d=function(n,t,r){e.o(n,t)||Object.defineProperty(n,t,{configurable:!1,enumerable:!0,get:r})},e.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(t,"a",t),t},e.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},e.p="",e(e.s=1)}([function(n,e,t){"use strict";var r=t(2),o=function(n){return n&&n.__esModule?n:{default:n}}(r);if(!o.default)throw new Error("ngTagsInput.extends requires a AngularJS");n.exports=o.default},function(n,e,t){"use strict";(function(n){t(3),t(4),n.module("ngTagsInput.extends",["ngTagsInput.extends.changeTo"])}).call(e,t(0))},function(e,t){e.exports=n},function(n,t){n.exports=e},function(n,e,t){"use strict";(function(n){var e=[].indexOf;n.module("ngTagsInput.extends.changeTo",["ngTagsInput"]).constant("tagsChangeToConfig",{seperator:"|"}).directive("tagsChangeTo",["tagsChangeToConfig","$parse",function(t,r){return{restrict:"AC",require:"tagsInput",link:function(o,u,i){var a,f,s,l,c,p,g,d,x;f=r(i.ngModel),g=f.assign,s=r(i.tagsChangeTo),d=s.assign,p=t.seperator,i.$observe("tagsChangeToSeperator",function(n){return p=n||t.seperator}),l=null,i.$observe("keyProperty",function(n){return l=n}),a="text",i.$observe("displayProperty",function(n){return a=n||"text"}),c=function(n,e){var t;return t={},t[n]=e,t},x=function(n){var t,r,o,u;for(u=[],r=0,o=n.length;r<o;r++)t=n[r],e.call(u,t)<0&&u.push(t);return u},o.$watch(s,function(e){var t;if(null!=g)return g(o,function(){var r,o,u,i,f;for(i=x("array"===p?null==e?e=[]:n.isArray(e)?void 0:e=[e]:(null!=e&&"function"==typeof e.split&&null!=(u=e.split(p))&&"function"==typeof u.filter?u.filter(function(n){return!!n}):void 0)||[]),f=[],r=0,o=i.length;r<o;r++)t=i[r],f.push(c(l||a,t));return f}())}),o.$watchCollection(function(){var n,e,t,r,u;for(t=f(o)||[],r=[],n=0,e=t.length;n<e;n++)u=t[n],r.push(u[l||a]);return r},function(n){if(null!=n&&null!=d)return d(o,"array"===p?n:n.join(p))})}}}])}).call(e,t(0))}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,