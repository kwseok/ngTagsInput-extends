!function(e,n){if("object"==typeof exports&&"object"==typeof module)module.exports=n(require("angular"),require("ng-tags-input"));else if("function"==typeof define&&define.amd)define(["angular","ng-tags-input"],n);else{var t="object"==typeof exports?n(require("angular"),require("ng-tags-input")):n(e.angular,e[!1]);for(var r in t)("object"==typeof exports?exports:e)[r]=t[r]}}(window,(function(e,n){return o={},t.m=r=[function(n,t){n.exports=e},function(e,n,t){"use strict";t.r(n);var r=t(0),o=t.n(r);if(!o.a)throw new Error("ngTagsInput.extends requires a AngularJS");n.default=o.a},function(e,n,t){"use strict";t.r(n),function(e){t(3),t(4),e.module("ngTagsInput.extends",["ngTagsInput.extends.changeTo"])}.call(this,t(1).default)},function(e,t){e.exports=n},function(e,n,t){"use strict";(function(e){var n=[].indexOf;e.module("ngTagsInput.extends.changeTo",["ngTagsInput"]).constant("tagsChangeToConfig",{seperator:"|"}).directive("tagsChangeTo",["tagsChangeToConfig","$parse",function(t,r){return{restrict:"AC",require:"tagsInput",link:function(o,u,i){var a,f,l,s,c,p,g,d,y;f=r(i.ngModel),g=f.assign,l=r(i.tagsChangeTo),d=l.assign,p=t.seperator,i.$observe("tagsChangeToSeperator",(function(e){return p=e||t.seperator})),s=null,i.$observe("keyProperty",(function(e){return s=e})),a="text",i.$observe("displayProperty",(function(e){return a=e||"text"})),c=function(e,n){var t;return(t={})[e]=n,t},y=function(e){var t,r,o,u;for(u=[],r=0,o=e.length;r<o;r++)t=e[r],n.call(u,t)<0&&u.push(t);return u},o.$watch(l,(function(n){var t;if(null!=g)return g(o,function(){var r,o,u,i,f;for(f=[],r=0,o=(i=y("array"===p?null==n?n=[]:e.isArray(n)?void 0:n=[n]:(null!=n&&"function"==typeof n.split&&null!=(u=n.split(p))&&"function"==typeof u.filter?u.filter((function(e){return!!e})):void 0)||[])).length;r<o;r++)t=i[r],f.push(c(s||a,t));return f}())})),o.$watchCollection((function(){var e,n,t,r,u;for(r=[],e=0,n=(t=f(o)||[]).length;e<n;e++)u=t[e],r.push(u[s||a]);return r}),(function(e){if(null!=e&&null!=d)return d(o,"array"===p?e:e.join(p))}))}}}])}).call(this,t(1).default)}],t.c=o,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)t.d(r,o,function(n){return e[n]}.bind(null,o));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=2);function t(e){if(o[e])return o[e].exports;var n=o[e]={i:e,l:!1,exports:{}};return r[e].call(n.exports,n,n.exports,t),n.l=!0,n.exports}var r,o}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,